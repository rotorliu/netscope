// Generated by CoffeeScript 1.12.7
(function() {
  var Loader,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Loader = (function() {
    function Loader(parser) {
      this.parser = parser;
      this.load = bind(this.load, this);
      this.fromPreset = bind(this.fromPreset, this);
      this.fromURL = bind(this.fromURL, this);
      this.fromGist = bind(this.fromGist, this);
    }

    Loader.prototype.fromGist = function(gistID, callback) {
      var url;
      url = 'https://api.github.com/gists/' + gistID;
      return $.getJSON(url, (function(_this) {
        return function(data) {
          var fileInfo, fileKey, fileSet, filename, isProto, isSolitaryFile, isSolver;
          fileSet = data['files'];
          isSolitaryFile = Object.keys(fileSet).length === 1;
          for (fileKey in fileSet) {
            fileInfo = fileSet[fileKey];
            filename = fileInfo['filename'].toLowerCase();
            isProto = _.endsWith(filename, '.prototxt');
            isSolver = _.startsWith(filename, 'solver');
            if ((isProto && !isSolver) || isSolitaryFile) {
              _this.load(fileInfo['content'], callback);
              return;
            }
          }
          return console.log('No prototxt found in the given GIST.');
        };
      })(this));
    };

    Loader.prototype.fromURL = function(url, callback) {
      return $.ajax({
        url: url,
        success: (function(_this) {
          return function() {
            return _this.load(data, callback);
          };
        })(this)
      });
    };

    Loader.prototype.fromPreset = function(name, callback) {
      return $.get('./presets/' + name + '.prototxt', (function(_this) {
        return function(data) {
          return _this.load(data, callback);
        };
      })(this));
    };

    Loader.prototype.load = function(data, callback) {
      var net;
      net = this.parser.parse(data);
      if (!_.isUndefined(callback)) {
        callback(net);
      }
      return net;
    };

    return Loader;

  })();

}).call(this);
